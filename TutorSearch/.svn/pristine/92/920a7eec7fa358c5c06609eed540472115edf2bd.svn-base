package tan.code.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.lucene.document.DateTools;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.google.gson.JsonObject;

import tan.code.model.Tutor;
import tan.code.model.TutorSearchInfo;
import tan.code.service.TutorService;
import tan.code.utils.JSONHelper;

@Controller
@RequestMapping("/tutor")
public class TutorController {
	private static Logger logger = Logger.getLogger(TutorController.class);
	private TutorService tutorService;
	private List<Tutor> tutors;

	public TutorService getTutorService() {
		return tutorService;
	}

	@Resource
	public void setTutorService(TutorService tutorService) {
		this.tutorService = tutorService;
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public String create(Tutor tutor) {
		tutor.setBrowse(0);// 初始化浏览次数为0
		tutor.setWb_num(0);// 初始化被举报的此时为0
		tutor.setDate(DateTools.dateToString(new Date(), DateTools.Resolution.DAY));
		String e_date = tutor.getEnd().replace("-", "");
		tutor.setEnd(e_date);

		tutorService.add(tutor);

		return "/success.jsp";
	}

	// 全部信息混合查找
	@RequestMapping(value = "/search", method = RequestMethod.GET)
	public String search(String searchText, ModelMap map) {
		logger.info("用户搜索:" + searchText);
		long begin = System.currentTimeMillis();
		tutors = tutorService.search(searchText);
		long end = System.currentTimeMillis();

		// 相关搜索-备注：由于这里是从新打开索引，所以会影响效率，可以改为在搜索里面直接传值调用-20131010-twj
		HashSet<String> words = new HashSet<String>();
		words.add(searchText);
		List<String> rws_list = tutorService.relatewords(words, searchText);
		map.put("rws_list", rws_list);

		String totalTime = String.valueOf(end - begin);
		if (tutors.size() == 0) {
			return "/tutor/nodata.jsp";
		} else {
			map.put("tutors", tutors);
			map.put("totalTime", totalTime);
			return "tutorslist.ftl";
		}

	}

	// 自定义混合查找
	@RequestMapping(value = "/s_multi", method = RequestMethod.GET)
	public String searchByMulti(TutorSearchInfo tutorSearchInfo, ModelMap map) {
		if (tutorSearchInfo.getCity() != null) {
			// tutorService.
		}
		return null;
	}

	// 按城市查找
	@RequestMapping(value = "/s_city", method = RequestMethod.GET)
	public String searchByCity(String city, ModelMap map) {
		long begin = System.currentTimeMillis();
		tutors = tutorService.searchByCity(1000,city);
		long end = System.currentTimeMillis();
		String totalTime = String.valueOf(end - begin);

		// 相关搜索-备注：由于这里是从新打开索引，所以会影响效率，可以改为在搜索里面直接传值调用-20131010-twj
		HashSet<String> words = new HashSet<String>();
		words.add(city);
		List<String> rws_list = tutorService.relatewords(words, city);
		map.put("rws_list", rws_list);

		if (tutors.size() == 0) {
			return "/tutor/nodata.jsp";
		} else {
			map.put("tutors", tutors);
			map.put("totalTime", totalTime);
			return "tutorslist.ftl";
		}
	}

	// 按城市查找-首页数据
	@RequestMapping(value = "/s_city2", method = RequestMethod.GET, produces = "text/html;charset=UTF-8")
	public void searchByCity2(String city, HttpServletResponse response) throws IOException, ParseException {
		
		//解决数据返回页面乱码问题
		response.setCharacterEncoding("UTF-8"); //设置编码格式
		response.setContentType("text/html"); //设置数据格式
		PrintWriter printWriter = response.getWriter();
		tutors = tutorService.searchByCity(20,city);

		JSONHelper<Tutor> jsonHelper = new JSONHelper<Tutor>();
		List<JsonObject> j_list = new ArrayList<JsonObject>();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		if (tutors.size() == 0) {
			printWriter.print("nodata");
		} else {
			for (Tutor tutor : tutors) {
				tutor.setDate(sdf.format(DateTools.stringToDate(tutor.getDate())));
				j_list.add(jsonHelper.createJSON(tutor));
			}
			// 返回json字符串给页面		
			printWriter.println(j_list);
			printWriter.flush();
		}
	}

	// 按发布日期范围查找
	@RequestMapping(value = "/s_date", method = RequestMethod.GET)
	public String searchByDateRange(String begin, String end, ModelMap map) {
		String b_date = begin.replace("-", "");
		String e_date = end.replace("-", "");
		tutors = tutorService.searchByDateRange(Long.valueOf(b_date), Long.valueOf(e_date));
		List<String> rws_list = new ArrayList<String>();
		rws_list.add("无相关");
		map.put("rws_list", rws_list);

		if (tutors.size() == 0) {
			return "/tutor/nodata.jsp";
		} else {
			map.put("tutors", tutors);
			map.put("totalTime", "1");
			return "tutorslist.ftl";
		}
	}

	@RequestMapping(value = "/show/{id}", method = RequestMethod.GET)
	public String getTutor(@PathVariable("id") String id, ModelMap map) {

		Tutor tutor = tutorService.getTutorByDocmentId(Integer.parseInt(id));
		System.out.println(id);
		System.out.println(tutor.getTitle());
		System.out.println(tutor.getContent());
		map.put("tutor", tutor);
		return "tutor_data.ftl";
	}

}
