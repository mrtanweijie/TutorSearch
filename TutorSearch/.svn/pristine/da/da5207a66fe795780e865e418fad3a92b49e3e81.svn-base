package tan.code.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.util.WebUtils;

import tan.code.model.LoginInfo;
import tan.code.model.User;
import tan.code.model.UserInfo;
import tan.code.service.UserService;
import tan.code.utils.JSONHelper;

import org.apache.log4j.Logger;

import com.google.gson.JsonObject;

@Controller
@RequestMapping("/user")
public class UserController {
	private static Logger logger = Logger.getLogger(UserController.class);
	private UserService userService;
	private List<User> users;

	// @RequestMapping(value = "/checkname", method = RequestMethod.POST)
	// public void checkname(String name, HttpServletResponse response) throws Exception {
	// PrintWriter printWriter = response.getWriter();
	// if (userService.checkName(name)) {
	// printWriter.print("success");
	// }
	// else {
	// printWriter.print("error");
	// }
	// }
	//
	// @RequestMapping(value = "/checkemail", method = RequestMethod.POST)
	// public void checkemail(String email, HttpServletResponse response) throws Exception {
	// PrintWriter printWriter = response.getWriter();
	// if (userService.checkEmail(email)) {
	// printWriter.print("success");
	// }
	// else {
	// printWriter.print("error");
	// }
	// }

	@RequestMapping(value = "/register", method = RequestMethod.POST)
	public String register(User user, HttpServletResponse response) throws Exception {

		if (userService.checkName(user.getName()) && userService.checkEmail(user.getEmail())) {
			user.setIdentity(2);
			userService.add(user);
			System.out.println("注册成功。。。");
			return "login-1.jsp";
		} else {
			System.out.println("注册失败。。。");
			return "register.jsp";
		}
	}

	@RequestMapping(value = "/create", method = RequestMethod.POST)
	public String create(User user, HttpServletResponse response) throws Exception {

		if (userService.checkName(user.getName()) && userService.checkEmail(user.getEmail())) {
			userService.add(user);
			// 发送邮件
			// SendEmail.sendHtmlEmail(user.getName(), user.getEmail());
			System.out.println("用户添加成功。。。");
			return "/success.jsp";
		} else {
			System.out.println("用户添加失败。。。");
			return "/admin/adduser.jsp";
		}
	}

	// //写入索引
	// @RequestMapping(value = "/create_instructor", method = RequestMethod.POST)
	// public String createInstructor(UserInfo userInfo, HttpServletResponse response) throws Exception {
	//
	// return null;
	// }

	
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.GET)
	public String delete(@PathVariable("id") String id) {
		userService.delete(Integer.valueOf(id));
		return "/success.jsp";
	}

	@RequestMapping(value = "/update", method = RequestMethod.PUT)
	public String update(UserInfo userinfo) {
		// userService.update(userinfo, user.getId());
		return "/success.jsp";
	}

	// 完善个人信息
	@RequestMapping(value = "/com_info", method = RequestMethod.POST)
	public String com_info(UserInfo userinfo, int u_id) {
		// userService.update(userinfo, user.getId());

		userService.add_userinfo(userinfo, u_id);
		return "/success.jsp";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public String show(@PathVariable("id") String id, ModelMap map) {
		User user = new User();
		user = userService.getuser(Integer.valueOf(id));

		UserInfo userInfo = new UserInfo();
		userInfo = userService.getuserinfo(user.getId());
		// WebUtils.setSessionAttribute(request, "id", id);
		map.put("user", user);
		map.put("userinfo", userInfo);

		System.out.println(user.getName());
		return "myinfo.ftl";
	}

	@RequestMapping(value = "/show/{from}/{total}", method = RequestMethod.GET)
	public String getuserlist(@PathVariable("from") String from, @PathVariable("total") String total, ModelMap map,
			HttpServletRequest request) {
		int pageSize = Integer.valueOf(total);
		users = userService.getuserlist(Integer.valueOf(from), pageSize);

		// 用户总数
		int userNum = userService.getUserNum();
		// 总页数
		long pageNum = userService.getTotalPage(userNum, pageSize);

		System.out.println("用户总数：" + userNum + ";总页数：" + pageNum);

		WebUtils.setSessionAttribute(request, "userNum", userNum);
		WebUtils.setSessionAttribute(request, "pageNum", pageNum);

		map.put("pageNum", pageNum);
		map.put("users", users);
		return "userslist.ftl";
	}

	@RequestMapping(value = "/show2/{from}/{total}", method = RequestMethod.GET)
	public void getuserlist2(@PathVariable("from") String from, @PathVariable("total") String total, ModelMap map,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		int pageSize = Integer.valueOf(total);
		users = userService.getuserlist(Integer.valueOf(from), pageSize);

		// 用户总数
		int userNum = userService.getUserNum();
		// 总页数
		long pageNum = userService.getTotalPage(userNum, pageSize);

		System.out.println("用户总数：" + userNum + ";总页数：" + pageNum);

		WebUtils.setSessionAttribute(request, "userNum", userNum);
		WebUtils.setSessionAttribute(request, "pageNum", pageNum);

		map.put("pageNum", pageNum);
		map.put("users", users);

		// 解决数据返回页面乱码问题
		response.setCharacterEncoding("UTF-8"); // 设置编码格式
		response.setContentType("text/html"); // 设置数据格式
		PrintWriter printWriter = response.getWriter();
		JSONHelper<User> jsonHelper = new JSONHelper<User>();
		List<JsonObject> u_list = new ArrayList<JsonObject>();
		if (users.size() == 0) {
			printWriter.print("nodata");
		} else {

			for (User user : users) {
				u_list.add(jsonHelper.createJSON(user));
			}
			// 返回json字符串给页面
			printWriter.println(u_list);
			printWriter.flush();
		}
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public void login(LoginInfo loginInfo, HttpServletRequest request, HttpServletResponse response) throws IOException {
		System.out.println("login");
		System.out.println(loginInfo.getName() + loginInfo.getPassword() + loginInfo.getCheck());
		List<User> users = userService.checkUser(loginInfo.getName(), loginInfo.getPassword());
		PrintWriter printWriter = response.getWriter();
		if (users.size() == 1 && users.get(0).getIdentity() == 2) {
			// 将用户名写入session
			WebUtils.setSessionAttribute(request, "id", users.get(0).getId());
			WebUtils.setSessionAttribute(request, "name", loginInfo.getName());
			// 记录登录日志
			logger.info("用户登录:" + loginInfo.getName());
			printWriter.print("success");
		} else {
			printWriter.print("false");
		}

		printWriter.close();

	}

	@RequestMapping(value = "/admin_login", method = RequestMethod.POST)
	public void admin_login(LoginInfo loginInfo, HttpServletRequest request, HttpServletResponse response)
			throws IOException {
		System.out.println("admin login");
		System.out.println(loginInfo.getName() + loginInfo.getPassword() + loginInfo.getCheck());

		List<User> users = userService.checkUser(loginInfo.getName(), loginInfo.getPassword());

		PrintWriter printWriter = response.getWriter();
		System.out.println(users.get(0).getId());
		System.out.println(users.get(0).getIdentity());

		if (users.size() == 1 && users.get(0).getIdentity() == 2) {
			// 将用戶id與用户名写入session
			WebUtils.setSessionAttribute(request, "id", users.get(0).getId());
			WebUtils.setSessionAttribute(request, "name", loginInfo.getName());
			// 记录登录日志
			logger.info("管理员登录:" + loginInfo.getName());
			printWriter.print("success");
		} else {
			printWriter.print("false");
		}
		printWriter.close();
	}

	// 退出登录
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public void logout(HttpServletRequest request, HttpServletResponse response) {

		// 清除session
		Enumeration<String> em = request.getSession().getAttributeNames();
		while (em.hasMoreElements()) {
			request.getSession().removeAttribute(em.nextElement().toString());
		}
		request.getSession().invalidate();
		// 获取项目真实路径
		String path = request.getContextPath() + "/index-1.jsp";
		// 拼接跳转页面路径
		String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path;
		// 刷新页面
		String str = "<script>top.location='" + basePath + "'</script>";
		System.out.println(str);
		responseTxt(response, str);
	}

	// 返回前台页面
	protected void responseTxt(HttpServletResponse response, String str) {
		try {
			response.setContentType("text/html;charset=UTF-8");
			PrintWriter out = response.getWriter();
			out.write(str);
			out.flush();
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public UserService getUserService() {
		return userService;
	}

	@Resource
	public void setUserService(UserService userService) {
		this.userService = userService;
	}

}
